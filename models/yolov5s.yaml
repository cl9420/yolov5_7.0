# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 2 # number of classes
depth_multiple: 0.33  # model depth multiple # 模型层数因子 控制模型的深度（BottleneckCSP个数）
width_multiple: 0.50  # layer channel multiple  # 模型通道数因子 控制Conv通道channel个数（卷积核数量）
anchors: # 9个anchor，其中P表示特征图的层级，P3/8该层特征图缩放为1/8,是第3层特征
  - [10,13, 16,30, 33,23]  # P3/8 # P3/8 FPN接主干网络下采样8倍后的anchor大小,检测小目标,10,13是一组尺寸，总共三组检测小目标
  - [30,61, 62,45, 59,119]  # P4/16 FPN接主干网络下采样4倍后的anchor大小,检测中目标，共三组
  - [116,90, 156,198, 373,326]  # P5/32 FPN接主干网络下采样2倍后的anchor大小,检测大目标，共三组
#尺度越大的feature map分辨率越大，相对于原图的下采样越小，其感受野也就越小，那么设置的anchors自然越小，如[10,13, 16,30, 33,23]，因此对原始图像中的小物体预测较好；
#尺度越小的feature map分辨率越小，相对于原图的下采样越大，其感受野越大，设置的anchors自然也就越大，如[116, 90, 156,198, 373,326]，因此对原始图像中的大物体预测较好。
# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  #from ：   表示当前模块的输入来自那一层的输出，-1表示将上一层的输出当做自己的输入（第0层的-1表示输入的图像）。
  #number：  表示当前模块的重复次数，实际的重复次数还要由上面的参数depth_multiple共同决定，决定网络模型的深度。
  #module：  表示该层模块的名称，这些模块写在common.py中，进行模块化的搭建网络。
  #args：  表示类的初始化参数，用于解析作为 module 的传入参数，会在网络搭建过程中根据不同层进行改变，我们后面具体分析。
  # 640*640*3
  [[-1, 1, Conv, [64, 6, 2, 2]],# 0-P1/2  [3, 32, 6, 2, 2]  320*320*64
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4   [32, 64, 3, 2]   160*160*128
   [-1, 3, C3, [128]],          # 2        [64, 64, 1]      160*160*128
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8   [64, 128, 3, 2]  80*80*256
   [-1, 6, C3, [256]],          # 4        [128, 128, 2]    80*80*256
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16  [128, 256, 3, 2] 40*40*512
   [-1, 9, C3, [512]],          # 6        [256, 256, 3]    40*40*512
   [-1, 1, Conv, [1024, 3, 2]], # 7-P5/32  [256, 512, 3, 2] 20*20*1024
   [-1, 3, C3, [1024]],         # 8        [512, 512, 1]    20*20*1024
   [-1, 1, SPPF, [1024, 5]],     # 9        [512, 512, 5]   20*20*1024
  ]

# YOLOv5 v6.0 head  YOLOv5中的Head包括Neck和Detect两部分。
# Neck采用了FPN+PAN结构，Detect结构和YOLOv3中的Head一样。其中BottleNeckCSP带有False，说明没有使用残差结构，而是采用的backbone中的Conv。
head:
  # 20*20*1024
  # 前两个阶段是向上concat
  [[-1, 1, Conv, [512, 1, 1]], # 10                 [512, 256, 1, 1]             20*20*512
   # nn.upsample不改变channel但是会把图片宽和高都变为2倍
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],      # 11    [None, 2, 'nearest'] 40*40*512
    # 与上面backbone中的 P4阶段的最后一个输出做一个concat
    # 进行concat的两层必须大小相同、通道数相同 concat之后通道翻倍
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4                                 40*40*1024（即输出40×40×512contact40×40×512=40×40×1024）
   [-1, 3, C3, [512, False]],  # 13                  [512, 256, 1, False]        40*40*512
    # [512, False]： C3层的两个参数
    # 512：channel=512
    # False：没有残差模块
   [-1, 1, Conv, [256, 1, 1]], # 14                  [256, 128, 1, 1]            40*40*256
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], #15   [None, 2, 'nearest']        80*80*256
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3     [1]                         80*80*512
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)     [256, 128, 1, False]        80*80*256

   [-1, 1, Conv, [256, 3, 2]],                     # [128, 128, 3, 2]            40*40*256
   [[-1, 14], 1, Concat, [1]],  # cat head P4                                    40*40*512
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)   [256, 256, 1, False]        40*40*512

   [-1, 1, Conv, [512, 3, 2]], # 21                  [256, 256, 3, 2]            20*20*512
   [[-1, 10], 1, Concat, [1]],  # cat head P5                                    20*20*1024
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)   [512, 512, 1, False]        20*20*1024
   # 有三个检测层，分别是在17层下面、20层下面、23层下面
   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
